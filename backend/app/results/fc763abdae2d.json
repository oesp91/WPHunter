{"version":"1.108.0","results":[{"check_id":"dockerfile.security.missing-user-entrypoint.missing-user-entrypoint","path":"Dockerfile","start":{"line":46,"col":1,"offset":1466},"end":{"line":46,"col":36,"offset":1501},"extra":{"message":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.","fix":"USER non-root\nENTRYPOINT [\"docker-entrypoint.sh\"]","metadata":{"cwe":["CWE-269: Improper Privilege Management"],"category":"security","technology":["dockerfile"],"confidence":"MEDIUM","owasp":["A04:2021 - Insecure Design"],"references":["https://owasp.org/Top10/A04_2021-Insecure_Design"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/dockerfile.security.missing-user-entrypoint.missing-user-entrypoint","shortlink":"https://sg.run/k281"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage","path":"node/main.js","start":{"line":11,"col":7,"offset":247},"end":{"line":11,"col":22,"offset":262},"extra":{"message":"A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.","metadata":{"category":"security","references":["https://www.npmjs.com/package/csurf","https://www.npmjs.com/package/csrf","https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"],"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"technology":["javascript","typescript","express"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage","shortlink":"https://sg.run/BxzR"},"severity":"INFO","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret","path":"node/main.js","start":{"line":21,"col":5,"offset":469},"end":{"line":21,"col":24,"offset":488},"extra":{"message":"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).","metadata":{"interfile":true,"cwe":["CWE-798: Use of Hard-coded Credentials"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"owasp":["A07:2021 - Identification and Authentication Failures"],"category":"security","technology":["express","secrets"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret","shortlink":"https://sg.run/LYvG"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name","path":"node/main.js","start":{"line":37,"col":9,"offset":744},"end":{"line":37,"col":22,"offset":757},"extra":{"message":"Donâ€™t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly.","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"source-rule-url":"https://expressjs.com/en/advanced/best-practice-security.html","category":"security","technology":["express"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","references":["https://owasp.org/Top10/A04_2021-Insecure_Design"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name","shortlink":"https://sg.run/1Z5x"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain","path":"node/main.js","start":{"line":37,"col":9,"offset":744},"end":{"line":37,"col":22,"offset":757},"extra":{"message":"Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"source-rule-url":"https://expressjs.com/en/advanced/best-practice-security.html","category":"security","technology":["express"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","references":["https://owasp.org/Top10/A04_2021-Insecure_Design"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain","shortlink":"https://sg.run/rd41"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires","path":"node/main.js","start":{"line":37,"col":9,"offset":744},"end":{"line":37,"col":22,"offset":757},"extra":{"message":"Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies.","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"source-rule-url":"https://expressjs.com/en/advanced/best-practice-security.html","category":"security","technology":["express"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","references":["https://owasp.org/Top10/A04_2021-Insecure_Design"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires","shortlink":"https://sg.run/N4eG"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly","path":"node/main.js","start":{"line":37,"col":9,"offset":744},"end":{"line":37,"col":22,"offset":757},"extra":{"message":"Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"source-rule-url":"https://expressjs.com/en/advanced/best-practice-security.html","category":"security","technology":["express"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","references":["https://owasp.org/Top10/A04_2021-Insecure_Design"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly","shortlink":"https://sg.run/ydBO"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path","path":"node/main.js","start":{"line":37,"col":9,"offset":744},"end":{"line":37,"col":22,"offset":757},"extra":{"message":"Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"source-rule-url":"https://expressjs.com/en/advanced/best-practice-security.html","category":"security","technology":["express"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","references":["https://owasp.org/Top10/A04_2021-Insecure_Design"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path","shortlink":"https://sg.run/b7pd"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure","path":"node/main.js","start":{"line":37,"col":9,"offset":744},"end":{"line":37,"col":22,"offset":757},"extra":{"message":"Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"source-rule-url":"https://expressjs.com/en/advanced/best-practice-security.html","category":"security","technology":["express"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","references":["https://owasp.org/Top10/A04_2021-Insecure_Design"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure","shortlink":"https://sg.run/9oKz"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.express.security.audit.remote-property-injection.remote-property-injection","path":"node/main.js","start":{"line":48,"col":9,"offset":1117},"end":{"line":48,"col":42,"offset":1150},"extra":{"message":"Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.","metadata":{"confidence":"LOW","owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"cwe":["CWE-522: Insufficiently Protected Credentials"],"category":"security","technology":["express"],"references":["https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/javascript.express.security.audit.remote-property-injection.remote-property-injection","shortlink":"https://sg.run/Z4gn"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-filename.tainted-filename","path":"php/view.php","start":{"line":7,"col":28,"offset":177},"end":{"line":7,"col":33,"offset":182},"extra":{"message":"File name based on user input risks server-side request forgery.","metadata":{"technology":["php"],"category":"security","cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename","shortlink":"https://sg.run/Ayqp"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","path":"py/app.py","start":{"line":25,"col":9,"offset":611},"end":{"line":31,"col":56,"offset":891},"extra":{"message":"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities.","metadata":{"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","shortlink":"https://sg.run/YvY4"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.injection.ssrf-requests.ssrf-requests","path":"py/app.py","start":{"line":27,"col":20,"offset":677},"end":{"line":27,"col":48,"offset":705},"extra":{"message":"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request.","metadata":{"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/python.flask.security.injection.ssrf-requests.ssrf-requests","shortlink":"https://sg.run/J9LW"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","path":"py/app.py","start":{"line":44,"col":1,"offset":1247},"end":{"line":44,"col":50,"offset":1296},"extra":{"message":"Running flask app with host 0.0.0.0 could expose the server publicly.","metadata":{"cwe":["CWE-668: Exposure of Resource to Wrong Sphere"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","shortlink":"https://sg.run/eLby"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly","path":"py/app.py","start":{"line":44,"col":1,"offset":1247},"end":{"line":44,"col":50,"offset":1296},"extra":{"message":"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function","metadata":{"cwe":["CWE-668: Exposure of Resource to Wrong Sphere"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly","shortlink":"https://sg.run/vz5b"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[],"paths":{"scanned":["Dockerfile","docker-entrypoint.sh","node/main.js","php/index.php","php/list.php","php/main.php","php/view.php","py/app.py"]},"skipped_rules":[]}